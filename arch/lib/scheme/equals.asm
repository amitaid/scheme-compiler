/* equals.asm
 * eq?
 * Programmer: Amitai Degani, Tal Zelig, 2014
 */

 EQ:
  PUSH(FP);
  MOV(FP,SP);

  CMP(FPARG(1), IMM(2));
  JUMP_EQ(EQ_ARGS_AMOUNT_OK);
  // ERROR

EQ_ARGS_AMOUNT_OK:
  MOV(R0,FPARG(2));
  MOV(R1,FPARG(3));
  CMP(IND(R0),IND(R1));
  JUMP_EQ(EQ_COMPARE);
  JUMP(EQ_FALSE);

 EQ_COMPARE:
  CMP(R0, IMM(T_VOID));         // void
  JUMP_EQ(EQ_ADRESS_COMPARE);
  CMP(INDD(R0,1), IMM(T_NIL));  // nil
  JUMP_EQ(EQ_ADRESS_COMPARE);
  CMP(INDD(R0,1), IMM(T_BOOL)); // boolean
  JUMP_EQ(EQ_ADRESS_COMPARE);
  CMP(INDD(R0,1), IMM(T_CHAR));  // char
  JUMP_EQ(EQ_VALUE_COMPARE_CHAR_INT);
  CMP(INDD(R0,1), IMM(T_INTEGER)); // int
  JUMP_EQ(EQ_VALUE_COMPARE_CHAR_INT);
  CMP(INDD(R0,1), IMM(T_FRACTION));
  JUMP_EQ(EQ_VALUE_COMPARE_FRACTION);
  CMP(INDD(R0,1), IMM(T_STRING));  // string
  JUMP_EQ(EQ_ADRESS_COMPARE);
  CMP(INDD(R0,1), IMM(T_SYMBOL));
  JUMP_EQ(EQ_VALUE_COMPARE_SYM);
  CMP(INDD(R0,1), IMM(T_PAIR));  // pair
  JUMP_EQ(EQ_ADRESS_COMPARE);
  CMP(INDD(R0,1), IMM(T_VECTOR)); // vector
  JUMP_EQ(EQ_ADRESS_COMPARE);


 EQ_VALUE_COMPARE_SYM:
  CMP(INDD(R0,3),INDD(R1,3));
  JUMP_EQ(EQ_TRUE);
  JUMP(EQ_FALSE);


 EQ_VALUE_COMPARE_FRACTION:
  CMP(INDD(R0,1),INDD(R1,1));
  JUMP_NE(EQ_TRUE);
  CMP(INDD(R0,2),INDD(R1,2));
  JUMP_EQ(EQ_TRUE);
  JUMP(EQ_FALSE);

 EQ_VALUE_COMPARE_CHAR_INT:
  CMP(INDD(R0,1),INDD(R1,1));
  JUMP_EQ(EQ_TRUE);
  JUMP(EQ_FALSE);


 EQ_ADRESS_COMPARE:
  CMP(R0,R1);
  JUMP_EQ(EQ_TRUE);
  JUMP(EQ_FALSE);



 EQ_TRUE:
  MOV(R0, IMM(5));
  JUMP(EQ_EXIT);
 EQ_FALSE:
  MOV(R0, IMM(3));
 EQ_EXIT:
  POP(FP);
  RETURN;

